[{"/Users/wilson/Desktop/sprainers /frontend/src/index.js":"1","/Users/wilson/Desktop/sprainers /frontend/src/store.js":"2","/Users/wilson/Desktop/sprainers /frontend/src/reportWebVitals.js":"3","/Users/wilson/Desktop/sprainers /frontend/src/App.js":"4","/Users/wilson/Desktop/sprainers /frontend/src/reducers/cartReducers.js":"5","/Users/wilson/Desktop/sprainers /frontend/src/reducers/userReducers.js":"6","/Users/wilson/Desktop/sprainers /frontend/src/reducers/orderReducers.js":"7","/Users/wilson/Desktop/sprainers /frontend/src/reducers/productReducers.js":"8","/Users/wilson/Desktop/sprainers /frontend/src/components/Header.jsx":"9","/Users/wilson/Desktop/sprainers /frontend/src/components/Footer.jsx":"10","/Users/wilson/Desktop/sprainers /frontend/src/screens/CartScreen.jsx":"11","/Users/wilson/Desktop/sprainers /frontend/src/screens/ShippingScreen.jsx":"12","/Users/wilson/Desktop/sprainers /frontend/src/screens/ProductScreen.jsx":"13","/Users/wilson/Desktop/sprainers /frontend/src/screens/Homescreen.jsx":"14","/Users/wilson/Desktop/sprainers /frontend/src/screens/LoginScreen.jsx":"15","/Users/wilson/Desktop/sprainers /frontend/src/screens/ProfileScreen.jsx":"16","/Users/wilson/Desktop/sprainers /frontend/src/screens/RegisterScreen.jsx":"17","/Users/wilson/Desktop/sprainers /frontend/src/screens/PaymentScreen.jsx":"18","/Users/wilson/Desktop/sprainers /frontend/src/screens/OrderScreen.jsx":"19","/Users/wilson/Desktop/sprainers /frontend/src/screens/UserListScreen.jsx":"20","/Users/wilson/Desktop/sprainers /frontend/src/screens/PlaceOrderScreen.jsx":"21","/Users/wilson/Desktop/sprainers /frontend/src/screens/ProductListScreen.jsx":"22","/Users/wilson/Desktop/sprainers /frontend/src/screens/UserEditScreen.jsx":"23","/Users/wilson/Desktop/sprainers /frontend/src/screens/ProductEditScreen.jsx":"24","/Users/wilson/Desktop/sprainers /frontend/src/screens/OrderListScreen.jsx":"25","/Users/wilson/Desktop/sprainers /frontend/src/constants/userConstant.js":"26","/Users/wilson/Desktop/sprainers /frontend/src/constants/orderConstant.js":"27","/Users/wilson/Desktop/sprainers /frontend/src/constants/productConstants.js":"28","/Users/wilson/Desktop/sprainers /frontend/src/constants/cartConstant.js":"29","/Users/wilson/Desktop/sprainers /frontend/src/components/SearchBox.jsx":"30","/Users/wilson/Desktop/sprainers /frontend/src/components/Message.jsx":"31","/Users/wilson/Desktop/sprainers /frontend/src/components/FrmContainer.jsx":"32","/Users/wilson/Desktop/sprainers /frontend/src/actions/userAction.js":"33","/Users/wilson/Desktop/sprainers /frontend/src/actions/productActions.js":"34","/Users/wilson/Desktop/sprainers /frontend/src/actions/cartAction.js":"35","/Users/wilson/Desktop/sprainers /frontend/src/components/Rating.jsx":"36","/Users/wilson/Desktop/sprainers /frontend/src/components/Loader.jsx":"37","/Users/wilson/Desktop/sprainers /frontend/src/components/Product.jsx":"38","/Users/wilson/Desktop/sprainers /frontend/src/components/CheckoutSteps.jsx":"39","/Users/wilson/Desktop/sprainers /frontend/src/actions/orderAction.js":"40"},{"size":821,"mtime":1724061105000,"results":"41","hashOfConfig":"42"},{"size":2270,"mtime":1714345313000,"results":"43","hashOfConfig":"42"},{"size":362,"mtime":1690720682000,"results":"44","hashOfConfig":"42"},{"size":2282,"mtime":1712147345000,"results":"45","hashOfConfig":"42"},{"size":1117,"mtime":1702895252000,"results":"46","hashOfConfig":"42"},{"size":3436,"mtime":1711812322000,"results":"47","hashOfConfig":"42"},{"size":3300,"mtime":1711660549000,"results":"48","hashOfConfig":"42"},{"size":3497,"mtime":1712144302000,"results":"49","hashOfConfig":"42"},{"size":3278,"mtime":1712822962000,"results":"50","hashOfConfig":"42"},{"size":851,"mtime":1703083119000,"results":"51","hashOfConfig":"42"},{"size":4658,"mtime":1702889421000,"results":"52","hashOfConfig":"42"},{"size":3569,"mtime":1708036809000,"results":"53","hashOfConfig":"42"},{"size":7678,"mtime":1712146714000,"results":"54","hashOfConfig":"42"},{"size":2421,"mtime":1731268593010,"results":"55","hashOfConfig":"42"},{"size":2630,"mtime":1702722959000,"results":"56","hashOfConfig":"42"},{"size":6150,"mtime":1711993325000,"results":"57","hashOfConfig":"42"},{"size":3974,"mtime":1702889650000,"results":"58","hashOfConfig":"42"},{"size":1665,"mtime":1703087540000,"results":"59","hashOfConfig":"42"},{"size":7537,"mtime":1712012040000,"results":"60","hashOfConfig":"42"},{"size":2831,"mtime":1716341023000,"results":"61","hashOfConfig":"42"},{"size":5304,"mtime":1711999050000,"results":"62","hashOfConfig":"42"},{"size":4090,"mtime":1711996595000,"results":"63","hashOfConfig":"42"},{"size":3220,"mtime":1711813840000,"results":"64","hashOfConfig":"42"},{"size":6168,"mtime":1712005637000,"results":"65","hashOfConfig":"42"},{"size":2487,"mtime":1712008721000,"results":"66","hashOfConfig":"42"},{"size":1476,"mtime":1711664508000,"results":"67","hashOfConfig":"42"},{"size":1181,"mtime":1711659254000,"results":"68","hashOfConfig":"42"},{"size":1496,"mtime":1711989983000,"results":"69","hashOfConfig":"42"},{"size":233,"mtime":1702895110000,"results":"70","hashOfConfig":"42"},{"size":849,"mtime":1712821345000,"results":"71","hashOfConfig":"42"},{"size":256,"mtime":1692787325000,"results":"72","hashOfConfig":"42"},{"size":402,"mtime":1702499750000,"results":"73","hashOfConfig":"42"},{"size":6559,"mtime":1731271990873,"results":"74","hashOfConfig":"42"},{"size":5509,"mtime":1731271846672,"results":"75","hashOfConfig":"42"},{"size":1317,"mtime":1731271672551,"results":"76","hashOfConfig":"42"},{"size":1679,"mtime":1690771670000,"results":"77","hashOfConfig":"42"},{"size":388,"mtime":1693008256000,"results":"78","hashOfConfig":"42"},{"size":827,"mtime":1731268726944,"results":"79","hashOfConfig":"42"},{"size":1218,"mtime":1702893879000,"results":"80","hashOfConfig":"42"},{"size":5281,"mtime":1731271766668,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"eqs54o",{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/wilson/Desktop/sprainers /frontend/src/index.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/store.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/reportWebVitals.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/App.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/reducers/cartReducers.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/reducers/userReducers.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/reducers/orderReducers.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/reducers/productReducers.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/components/Header.jsx",["215"],[],"import React from 'react'\nimport { NavDropdown } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Route } from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { logout } from '../actions/userAction'\nimport SearchBox from './SearchBox'\n\nconst Header = () => {\n\n  const dispatch = useDispatch()\n  const userLogin= useSelector( state => state.userLogin)\n  const {userInfo} = userLogin\n\n  const logoutHandler = () => {\n    dispatch(logout())\n  }\n  return (\n    <header>\n       <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n            <div className=\"container\">\n              <LinkContainer to=\"/\">\n                <nav className=\"navbar-brand\" >Sprainers</nav>\n              </LinkContainer>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <SearchBox /> \n                <ul className=\"navbar-nav ms-auto mb-2 mb-lg-0\">\n                    <li className=\"nav-item\">\n                    <LinkContainer to=\"/cart\">\n                    <nav className=\"nav-link \" aria-current=\"page\"><i className=\"fas fa-shopping-cart\"></i> Cart</nav>\n                    </LinkContainer>\n                    </li>\n                    <li className=\"nav-item\">\n                    <LinkContainer to=\"/profile\">\n                    <nav className=\"nav-link\" aria-current=\"page\"><i className=\"fa-regular fa-user\"></i> My Account</nav>\n                    </LinkContainer>\n                    </li>\n                    {userInfo ? (\n                      <NavDropdown title = {userInfo.name} id='username'>\n                        <LinkContainer to='/profile'>\n                          <NavDropdown.Item>Profile</NavDropdown.Item>\n                        </LinkContainer>\n                        <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\n                      </NavDropdown>\n                    )   : <li className=\"nav-item\">\n                    <LinkContainer to=\"/login\">\n                    <nav className=\"nav-link\"><i className=\"fas fa-user\"></i> Sign in</nav>\n                    </LinkContainer>\n                    </li>}\n                    {userInfo && userInfo.isAdmin && (\n                <NavDropdown title='Admin' id='adminmenu'>\n                  <LinkContainer to='/admin/userlist'>\n                    <NavDropdown.Item>Users</NavDropdown.Item>\n                  </LinkContainer>\n                  <LinkContainer to='/admin/productlist'>\n                    <NavDropdown.Item>Products</NavDropdown.Item>\n                  </LinkContainer>\n                  <LinkContainer to='/admin/orderlist'>\n                    <NavDropdown.Item>Orders</NavDropdown.Item>\n                  </LinkContainer>\n                </NavDropdown>\n              )}\n                    \n                </ul>\n                </div>\n            </div>\n            </nav>\n           \n    </header>\n  )\n}\n\nexport default Header","/Users/wilson/Desktop/sprainers /frontend/src/components/Footer.jsx",["216","217","218","219","220"],[],"import React from 'react'\n\nconst Footer = () => {\n  return (\n    <footer>\n        <footer className=\"py-3 my-4 \">\n    <ul className=\"nav justify-content-center border-bottom pb-3 mb-3\">\n      <li className=\"nav-item\"><a href=\"#\" className=\"nav-link px-2 text-body-secondary\">Home</a></li>\n      <li className=\"nav-item\"><a href=\"#\" className=\"nav-link px-2 text-body-secondary\">Features</a></li>\n      <li className=\"nav-item\"><a href=\"#\" className=\"nav-link px-2 text-body-secondary\">Pricing</a></li>\n      <li className=\"nav-item\"><a href=\"#\" className=\"nav-link px-2 text-body-secondary\">FAQs</a></li>\n      <li className=\"nav-item\"><a href=\"#\" className=\"nav-link px-2 text-body-secondary\">About</a></li>\n    </ul>\n    <p className=\"text-center text-body-secondary\">© 2023 Sprainers, Inc</p>\n  </footer>\n    </footer>\n  )\n}\n\nexport default Footer","/Users/wilson/Desktop/sprainers /frontend/src/screens/CartScreen.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/screens/ShippingScreen.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/screens/ProductScreen.jsx",["221","222","223","224","225"],[],"import React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\nimport {} from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Rating from \"../components/Rating\";\nimport {\n  Row,\n  Col,\n  Image,\n  ListGroup,\n  Form,\n  Button,\n  Card,\n  FormControl,\n  ListGroupItem,\n} from \"react-bootstrap\";\nimport {\n  listProductDetails,\n  createProductReview,\n} from \"../actions/productActions\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { PRODUCT_CREATE_REVIEW_RESET } from \"../constants/productConstants\";\n\nconst ProductScreen = ({}) => {\n  const [qty, setQty] = useState(1);\n  const [rating, setRating] = useState(0);\n  const [comment, setComment] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  const productDetails = useSelector((state) => state.productDetails);\n  const { loading, error, product } = productDetails;\n  const { id } = useParams();\n  // const { history } = useParams();\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const productReviewCreate = useSelector((state) => state.productReviewCreate);\n  const {\n    success: successProductReview,\n    loading: loadingProductReview,\n    error: errorProductReview,\n  } = productReviewCreate;\n\n  useEffect(() => {\n    if (successProductReview) {\n      setRating(0)\n      setComment('')\n    }\n    if (!product._id || product._id !== id) {\n      dispatch(listProductDetails(id))\n      dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\n    }\n    dispatch(listProductDetails(id));\n  }, [dispatch, id, successProductReview]);\n\n  const navigate = useNavigate();\n  const addToCartHandler = () => {\n    navigate(`/cart/${id}?qty=${qty}`);\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(\n      createProductReview(id, {\n        rating,\n        comment,\n      })\n    );\n  };\n  return (\n    <>\n      <Link\n        className=\"btn btn-light my-3\"\n        to=\"/\"\n      >\n        go back\n      </Link>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message varient=\"danger\">{error}</Message>\n      ) : (\n        <div className=\"row\">\n          <div className=\"col-md-5 \">\n            <img\n              src={product.image}\n              alt={product.name}\n              className=\"container-fluid\"\n            />\n          </div>\n          <div className=\"col-md-4\">\n            <ListGroup\n              variant=\"flush\"\n              style={{ fontSize: \"1vw\" }}\n            >\n              <ListGroupItem>\n                <h3 className=\"p-0\">{product.name}</h3>\n              </ListGroupItem>\n              <ListGroupItem>\n                <Rating\n                  value={product.rating}\n                  text={`${product.numReviews} reviews`}\n                />\n              </ListGroupItem>\n              <ListGroupItem>Price: ${product.price}</ListGroupItem>\n              <ListGroupItem>Description: {product.description}</ListGroupItem>\n            </ListGroup>\n          </div>\n          <div className=\"col-md-3\">\n            <div className=\"card \">\n              <ListGroup>\n                <ListGroupItem>\n                  <div className=\"row\">\n                    <div className=\"col\">Price:</div>\n                    <div className=\"col\">\n                      <strong>{product.price}</strong>\n                    </div>\n                  </div>\n                </ListGroupItem>\n                <ListGroupItem>\n                  <div className=\"row\">\n                    <div className=\"col\">Status:</div>\n                    <div className=\"col\">\n                      {product.countInStock > 0 ? \"In Stock\" : \"Out of Stock\"}\n                    </div>\n                  </div>\n                </ListGroupItem>\n                {product.countInStock > 0 && (\n                  <ListGroupItem>\n                    <div className=\"row\">\n                      <div className=\"col\">Qty</div>\n                      <div className=\"col\">\n                        <FormControl\n                          as=\"select\"\n                          value={qty}\n                          // onChange={(e) => setQTy(e.target.value)}\n                        >\n                          {[...Array(product.countInStock).keys()].map((x) => (\n                            <option key={x + 1}> {x + 1}</option>\n                          ))}\n                        </FormControl>\n                      </div>\n                    </div>\n                  </ListGroupItem>\n                )}\n\n                <ListGroupItem>\n                  <Button\n                    onClick={addToCartHandler}\n                    className=\"btn-block col-12 rounded-0\"\n                    type=\"button\"\n                    disabled={product.countInStock === 0}\n                  >\n                    Add To Cart\n                  </Button>\n                </ListGroupItem>\n              </ListGroup>\n            </div>\n          </div>\n        </div>\n      )}\n      <Row>\n        <Col md={6}>\n          <h2>Reviews</h2>\n          {product.reviews.length === 0 && <Message>No Reviews</Message>}\n          <ListGroup variant=\"flush\">\n            {product.reviews.map((review) => (\n              <ListGroup.Item key={review._id}>\n                <strong>{review.name}</strong>\n                <Rating value={review.rating} />\n                <p>{review.createdAt.substring(0, 10)}</p>\n                <p>{review.comment}</p>\n              </ListGroup.Item>\n            ))}\n            <ListGroup.Item>\n              <h2>Write a Customer Review</h2>\n              {successProductReview && (\n                <Message variant=\"success\">\n                  Review submitted successfully\n                </Message>\n              )}\n              {loadingProductReview && <Loader />}\n              {errorProductReview && (\n                <Message variant=\"danger\">{errorProductReview}</Message>\n              )}\n              {userInfo ? (\n                <Form onSubmit={submitHandler}>\n                  <Form.Group controlId=\"rating\">\n                    <Form.Label>Rating</Form.Label>\n                    <Form.Control\n                      as=\"select\"\n                      value={rating}\n                      onChange={(e) => setRating(e.target.value)}\n                    >\n                      <option value=\"\">Select...</option>\n                      <option value=\"1\">1 - Poor</option>\n                      <option value=\"2\">2 - Fair</option>\n                      <option value=\"3\">3 - Good</option>\n                      <option value=\"4\">4 - Very Good</option>\n                      <option value=\"5\">5 - Excellent</option>\n                    </Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"comment\">\n                    <Form.Label>Comment</Form.Label>\n                    <Form.Control\n                      as=\"textarea\"\n                      row=\"3\"\n                      value={comment}\n                      onChange={(e) => setComment(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n                  <Button\n                    disabled={loadingProductReview}\n                    type=\"submit\"\n                    variant=\"primary\"\n                  >\n                    Submit\n                  </Button>\n                </Form>\n              ) : (\n                <Message>\n                  Please <Link to=\"/login\">sign in</Link> to write a review{\" \"}\n                </Message>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n      </Row>\n    </>\n  );\n};\nexport default ProductScreen;\n","/Users/wilson/Desktop/sprainers /frontend/src/screens/Homescreen.jsx",["226","227","228","229"],[],"import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport Product from \"../components/Product\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { Container } from \"react-bootstrap\";\nimport pexelsImage from \"../screens/images/pexel.jpg\";\nimport sliderimg1 from \"../screens/images/sliderimg1.jpg\";\nimport sliderimg2 from \"../screens/images/sliderimg2.jpg\";\nimport { listProducts } from \"../actions/productActions\";\n\n\nconst Homescreen = () => {\n  const dispatch = useDispatch();\n\n  const { keyword } = useParams();\n\n\n  const productList = useSelector(state => state.productList)\n  const {loading, error, products} = productList\n  useEffect(() => {\n    dispatch(listProducts(keyword))\n  }, [dispatch, keyword])\n\n\n\n  return (\n    <>\n      <div id=\"carouselExampleFade\" className=\"carousel slide carousel-fade mt-5 mb-5\">\n        <div class=\"carousel-inner\">\n          <div class=\"carousel-item active\">\n            <img src={sliderimg1} class=\"d-block w-100\" alt=\"...\"/>\n          </div>\n          <div class=\"carousel-item\">\n            <img src={sliderimg2} class=\"d-block w-100\" alt=\"...\"/>\n          </div>\n\n        </div>\n        <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExampleFade\" data-bs-slide=\"prev\">\n          <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n          <span class=\"visually-hidden\">Previous</span>\n        </button>\n        <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExampleFade\" data-bs-slide=\"next\">\n          <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n          <span class=\"visually-hidden\">Next</span>\n        </button>\n        </div>\n      \n      <h1 className=\"pt-4\"> Latest Products</h1>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message varient='danger'>{error}</Message>\n      ) : (\n        <div className=\"row\">\n          {products.map((product) => (\n            <div\n              className=\"col-lg-4 col-md-12 col-sm-12 col-xl-3\"\n              key={product._id}\n            >\n              <Product product={product} />\n            </div>\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\nexport default Homescreen;\n","/Users/wilson/Desktop/sprainers /frontend/src/screens/LoginScreen.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/screens/ProfileScreen.jsx",["230","231","232","233","234"],[],"import React, { useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { Table, Form, Button, Row, Col } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { getUserDetails, updateUserProfile } from \"../actions/userAction\";\n// import Order from \"../../../backend/models/orderModel\";\n\nconst ProfileScreen = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(null);\n\n  \n  const searchParams = useLocation().search;\n  const dispatch = useDispatch();\n  const navigate = useNavigate(); \n  \n  const userDetails = useSelector((state) => state.userDetails)\n  const { loading, error, user } = userDetails\n  \n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\n  const { success } = userUpdateProfile;\n\n  // const orderListMy = useSelector((state) => state.orderListMy)\n  // const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\n\n  useEffect(() => {\n    if (!userInfo) {\n      navigate('/login'); \n    }else{\n        if(!user.name){\n            dispatch(getUserDetails('profile'))\n        }else{\n            setName(user.name)\n            setEmail(user.email)\n        }\n    }\n  }, [dispatch, userInfo, navigate, user]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if(password!== confirmPassword){\n        setMessage('Passwords do no match')\n    }else{\n       dispatch(updateUserProfile({id: user._id,name, email, password })) \n    }\n    \n  };\n\n  return <div className=\"row\">\n    <div className=\"col col-md-3\">\n    <h2>User Profile</h2>\n      <Form onSubmit={submitHandler}>\n        {message && <Message variant=\"danger\">{message}</Message>}\n        {error && <Message variant=\"danger\">{error}</Message>}\n        {success && <Message variant=\"success\">Profile Updated</Message>}\n        {loading && <Loader />}\n        <div className=\"form-row align-items-center\">\n          <div className=\"my-1\">\n            <label className=\"form-label\" htmlFor=\"inlineFormInputName\">\n              Name\n            </label>\n            <input\n              type=\"name\"\n              className=\"form-control\"\n              id=\"name\"\n              placeholder=\"Enter Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </div>\n        </div>\n\n        <div className=\"form-row align-items-center\">\n          <div className=\"my-1\">\n            <label className=\"form-label\" htmlFor=\"inlineFormInputName\">\n              Email Address\n            </label>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              id=\"inlineFormInputNa\"\n              placeholder=\"Enter Email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n        </div>\n\n        <div className=\"form-row align-items-center\">\n          <div className=\"my-1\">\n            <label className=\"form-label\" htmlFor=\"inlineFormInputName\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              id=\"password\"\n              placeholder=\"Password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"form-row align-items-center\">\n          <div className=\"my-1\">\n            <label className=\"form-label\" htmlFor=\"confirmPassword\">\n            Confirm Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              id=\"inlineFormInputName\"\n              placeholder=\"Confirm Password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n            />\n          </div>\n        </div>\n        <Button type=\"submit\" variant=\"primary\">\n          Update\n        </Button>\n      </Form>\n    </div>\n      <Col md={9}>\n        <h2>My Orders</h2>\n        {/* {loadingOrders ? (\n          <Loader />\n        ) : errorOrders ? (\n          <Message variant='danger'>{errorOrders}</Message>\n        ) : (\n          <Table striped bordered hover responsive className='table-sm'>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>DATE</th>\n                <th>TOTAL</th>\n                <th>PAID</th>\n                <th>DELIVERED</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.map((order) => (\n                <tr key={order._id}>\n                  <td>{order._id}</td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  <td>{order.totalPrice}</td>\n                  <td>\n                    {order.isPaid ? (\n                      order.paidAt.substring(0, 10)\n                    ) : (\n                      <i className='fas fa-times' style={{ color: 'red' }}></i>\n                    )}\n                  </td>\n                  <td>\n                    {order.isDelivered ? (\n                      order.deliveredAt.substring(0, 10)\n                    ) : (\n                      <i className='fas fa-times' style={{ color: 'red' }}></i>\n                    )}\n                  </td>\n                  <td>\n                    <LinkContainer to={`/order/${order._id}`}>\n                      <Button className='btn-sm' variant='light'>\n                        Details\n                      </Button>\n                    </LinkContainer>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )} */}\n      </Col>\n  </div>\n\n  \n};\n\nexport default ProfileScreen;\n","/Users/wilson/Desktop/sprainers /frontend/src/screens/RegisterScreen.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/screens/PaymentScreen.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/screens/OrderScreen.jsx",["235"],[],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {PayPalButton} from 'react-paypal-button-v2'\nimport { useNavigate, Link,useParams  } from \"react-router-dom\";\nimport { Row, Col, ListGroup, Image, Card, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\n\nimport { getOrderDetails, payOrder, deliverOrder } from \"../actions/orderAction\";\nimport{ORDER_PAY_RESET, ORDER_DELIVER_RESET} from '../constants/orderConstant'\n\n// Inside the component\n\n\nconst OrderScreen = ({match, history}) => {\n  const { id: orderId } = useParams();\n\n  const [sdkReady, setSdkReady] = useState(false)\n \n  const dispatch = useDispatch()\n  \n\n  const orderDetails = useSelector (state => state.orderDetails)\n  const { order, loading, error} = orderDetails\n\n  const orderPay = useSelector((state) => state.orderPay)\n  const { loading: loadingPay, success: successPay } = orderPay\n\n  const orderDeliver = useSelector((state) => state.orderDeliver)\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n  const userLogin = useSelector((state) => state.userLogin)\n  const { userInfo } = userLogin\n\n\n  const navigate = useNavigate();\n  \n\n\n  if(!loading){\n    const addDecimals = (num) => {\n        return(Math.round(num * 100) / 100).toFixed(2)\n      }\n    \n      order.itemsPrice = addDecimals(\n        order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n      )\n  }\n  \n  useEffect(() => {\n    if (!userInfo) {\n      navigate('/login')\n    }\n        const addPayPalScript = async () => {\n            const { data: clientId } = await axios.get('/api/config/paypal')\n            const script = document.createElement('script')\n            script.type = 'text/javascript'\n            script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\n            script.async = true\n            script.onload = () => {\n              setSdkReady(true)\n            }\n            document.body.appendChild(script)\n          }\n      \n          if (!order || successPay || successDeliver) {\n            dispatch({ type: ORDER_PAY_RESET })\n            dispatch({ type: ORDER_DELIVER_RESET }) \n            dispatch(getOrderDetails(orderId))\n          } else if (!order.isPaid) {\n            if (!window.paypal) {\n              addPayPalScript()\n            } else {\n              setSdkReady(true)\n            }\n          }\n        }, [dispatch, orderId,successPay, successDeliver, order])\n      \n  \n  const successPaymentHandler = (paymentResult) => {\n    console.log(paymentResult)\n    dispatch(payOrder(orderId, paymentResult))\n  }\n  const deliverHandler = () => {\n    dispatch(deliverOrder(order))\n  }\n\n  return loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message> : \n  <>\n  <h1>Order {order._id}</h1>\n  <Row>\n        <Col md={8}>\n          <ListGroup variant=\"flush\">\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>\n                <strong>Name: </strong>{order.user.name}\n              </p>\n              <p>\n              <strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n              </p>\n              <p>\n                <strong>Address: </strong>\n                {order.shippingAddress.address}, {order.shippingAddress.city}\n                {\"\"},{order.shippingAddress.postalCode}\n                {\"\"}, {order.shippingAddress.country}\n              </p>\n              {order.isPaid ? (\n                <Message variant = 'success'>Delivered on {order.delivered}</Message>\n              ) : (\n                <Message variant = 'danger'>Not Delivered</Message>\n              )\n              }\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <p>\n              <strong>Method:</strong>\n              {order.paymentMethod}\n              </p>\n              {order.isPaid ? (\n                <Message variant = 'success'>Paid on {order.paidAt}</Message>\n              ) : (\n                <Message variant = 'danger'>Not Paid</Message>\n              )\n              }\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {order.orderItems.length === 0 ? (\n                <Message>Order is empty</Message>\n              ) : (\n                <ListGroup variant=\"flush\">\n                  {order.orderItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link\n                            className=\"link\"\n                            to={`/product/${item.product}`}\n                          >\n                            {item.name}\n                          </Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n        <Col md={4}>\n          <Card>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>${order.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping</Col>\n                  <Col>${order.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>${order.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>${order.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              {!order.isPaid && (\n                <ListGroup.Item>\n                  {loadingPay && <Loader />}\n                  {!sdkReady ? (\n                    <Loader />\n                  ) : (\n                    <PayPalButton\n                      amount={order.totalPrice}\n                      onSuccess={successPaymentHandler}\n                    />\n                  )}\n                </ListGroup.Item>\n              )}\n              {loadingDeliver && <Loader />}\n              {userInfo &&\n                userInfo.isAdmin &&\n                order.isPaid &&\n                !order.isDelivered && (\n                  <ListGroup.Item>\n                    <Button\n                      type='button'\n                      className='btn btn-block'\n                      onClick={deliverHandler}\n                    >\n                      Mark As Delivered\n                    </Button>\n                  </ListGroup.Item>\n                )}\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n  </>\n};\n\nexport default OrderScreen;\n","/Users/wilson/Desktop/sprainers /frontend/src/screens/UserListScreen.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/screens/PlaceOrderScreen.jsx",["236","237"],["238"],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate, Link,  } from \"react-router-dom\";\nimport { Row, Col, ListGroup, Image, Card, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\nimport { createOrder } from \"../actions/orderAction\";\nimport { USER_DETAILS_RESET } from '../constants/userConstant'\n\nconst PlaceOrderScreen = ({}) => {\n  \n  const dispatch = useDispatch()\n  const cart = useSelector((state) => state.cart);\n\n  //Calculate prices\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2);\n  };\n  cart.itemsPrice = addDecimals(\n    cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n  );\n\n  cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100);\n\n  cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)));\n\n  cart.totalPrice =\n    (Number(cart.itemsPrice) +\n    Number(cart.shippingPrice) +\n    Number(cart.taxPrice)).toFixed(2);\n\n  const orderCreate = useSelector (state => state.orderCreate)\n  const { order, success, error} = orderCreate\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n  \n    if (success) {\n      navigate(`/order/${order._id}`);\n      dispatch({ type: USER_DETAILS_RESET })\n    }\n    // eslint-disable-next-line \n  }, [navigate, success]);\n  \n  \n  const placeOrderHandler = () => {\n    dispatch(createOrder({\n      orderItems: cart.cartItems,\n      shippingAddress: cart.shippingAddress,\n      paymentMethod: cart.paymentMethod,\n      itemsPrice: cart.itemsPrice,\n      shippingPrice: cart.shippingPrice,\n      taxPrice: cart.taxPrice,\n      totalPrice: cart.totalPrice,\n      \n    }))\n  };\n  return (\n    <>\n      <CheckoutSteps\n        step1\n        step2\n        step3\n        step4\n      />\n      <Row>\n        <Col md={8}>\n          <ListGroup variant=\"flush\">\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>\n                <strong>Address: </strong>\n                {cart.shippingAddress.address}, {cart.shippingAddress.city}\n                {\"\"},{cart.shippingAddress.postalCode}\n                {\"\"}, {cart.shippingAddress.country}\n              </p>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <strong>Method:</strong>\n              {cart.paymentMethod}\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {cart.cartItems.length === 0 ? (\n                <Message>Your cart is empty</Message>\n              ) : (\n                <ListGroup variant=\"flush\">\n                  {cart.cartItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link\n                            className=\"link\"\n                            to={`/product/${item.product}`}\n                          >\n                            {item.name}\n                          </Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n        <Col md={4}>\n          <Card>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>${cart.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping</Col>\n                  <Col>${cart.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>${cart.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>${cart.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                {error && <Message vatiant=\"danger\">{error}</Message>}\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Button\n                  type=\"button\"\n                  className=\"'btn-block\"\n                  disabled={cart.cartItems === 0}\n                  onClick={placeOrderHandler}\n                >\n                  Place Order\n                </Button>\n              </ListGroup.Item>\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default PlaceOrderScreen;\n","/Users/wilson/Desktop/sprainers /frontend/src/screens/ProductListScreen.jsx",["239","240","241","242","243","244"],[],"import React, { useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\n// import Paginate from '../components/Paginate'\nimport {\n  listProducts,\n  deleteProduct,\n  createProduct,\n} from '../actions/productActions'\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\n\nconst ProductListScreen = ({ history, match }) => {\n    // const { pageNumber } = useParams();\n    // const parsedPageNumber = pageNumber ? parseInt(pageNumber) : 1;\n    \n\n  const dispatch = useDispatch()\n\n  const productList = useSelector((state) => state.productList)\n  const { loading, error, products, page, pages } = productList\n\n  const productDelete = useSelector((state) => state.productDelete)\n  const {\n    loading: loadingDelete,\n    error: errorDelete,\n    success: successDelete,\n  } = productDelete\n\n  const productCreate = useSelector((state) => state.productCreate)\n  const {\n    loading: loadingCreate,\n    error: errorCreate,\n    success: successCreate,\n    product: createdProduct,\n  } = productCreate\n//  \n\n  const userLogin = useSelector((state) => state.userLogin)\n  const { userInfo } = userLogin\n  const navigate = useNavigate();\n  useEffect(() => {\n    dispatch({ type: PRODUCT_CREATE_RESET })\n\n    if (!userInfo || !userInfo.isAdmin) {\n      navigate('/login')\n    }\n    if (successCreate) {\n      navigate(`/admin/product/${createdProduct._id}/edit`)\n    } else {\n      dispatch(listProducts())\n    }\n  }, [\n    dispatch,\n    history,\n    navigate,\n    // userInfo,\n    successDelete,\n    successCreate,\n    createdProduct,\n    // pageNumber,\n  ])\n\n  const deleteHandler = (id) => {\n    if (window.confirm('Are you sure')) {\n      dispatch(deleteProduct(id))\n    }\n  }\n\n  const createProductHandler = (product) => {\n    dispatch(createProduct())\n  }\n\n  return (\n    <>\n      <Row className='align-items-center'>\n        <Col>\n          <h1>Products</h1>\n        </Col>\n        <Col className='text-end p-0'>\n          <Button className='my-3'    onClick={createProductHandler}>\n            <i className='fas fa-plus'></i> Create Product\n          </Button>\n        </Col>\n      </Row>\n      {loadingDelete && <Loader />}\n      {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n \n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant='danger'>{error}</Message>\n      ) : (\n        <>\n          <Table striped bordered hover responsive className='table-sm'>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>NAME</th>\n                <th>PRICE</th>\n                <th>CATEGORY</th>\n                <th>BRAND</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {products.map((product) => (\n                <tr key={product._id}>\n                  <td>{product._id}</td>\n                  <td>{product.name}</td>\n                  <td>${product.price}</td>\n                  <td>{product.category}</td>\n                  <td>{product.brand}</td>\n                  <td>\n                    <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                      <Button variant='light' className='btn-sm'>\n                        <i className='fas fa-edit'></i>\n                      </Button>\n                    </LinkContainer>\n                    <Button\n                      variant='danger'\n                      className='btn-sm'\n                      onClick={() => deleteHandler(product._id)}\n                    >\n                      <i className='fas fa-trash'></i>\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          {/* <Paginate pages={pages} page={page} isAdmin={true} /> */}\n        </>\n      )}\n    </>\n  )\n}\n\nexport default ProductListScreen\n","/Users/wilson/Desktop/sprainers /frontend/src/screens/UserEditScreen.jsx",["245"],[],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainer from '../components/FrmContainer'\nimport { getUserDetails, updateUser  } from '../actions/userAction'\nimport { USER_UPDATE_RESET } from '../constants/userConstant'\nimport { useParams, useNavigate } from 'react-router-dom';\n\nconst UserEditScreen = ({ history }) => {\n    const { id } = useParams(); \n    const userId = id;\n    \n\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [isAdmin, setIsAdmin] = useState(false)\n\n  const dispatch = useDispatch()\n\n  const userDetails = useSelector((state) => state.userDetails)\n  const { loading, error, user } = userDetails\n\n  const userUpdate = useSelector((state) => state.userUpdate)\n  const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = userUpdate\n\n//  \n  const navigate = useNavigate();\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: USER_UPDATE_RESET })\n      navigate('/admin/userlist')\n    } else {\n      if (!user.name || user._id !== userId) {\n        dispatch(getUserDetails(userId))\n      } else {\n        setName(user.name )\n        setEmail(user.email )\n        setIsAdmin(user.isAdmin)\n      }\n    }\n}, [dispatch, history, userId, user,successUpdate])\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    dispatch(updateUser({_id: userId, name, email, isAdmin }))\n  }\n\n  return (\n    <>\n      <Link to='/admin/userlist' className='btn btn-light my-3'>\n        Go Back\n      </Link>\n      <FormContainer>\n        <h1>Edit User</h1>\n        {loadingUpdate && <Loader />}\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n        {loading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant='danger'>{error}</Message>\n        ) : (\n          <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type='name'\n                placeholder='Enter name'\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='email'>\n              <Form.Label>Email Address</Form.Label>\n              <Form.Control\n                type='email'\n                placeholder='Enter email'\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='isadmin'>\n              <Form.Check\n                type='checkbox'\n                label='Is Admin'\n                checked={isAdmin}\n                onChange={(e) => setIsAdmin(e.target.checked)}\n              ></Form.Check>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'>\n              Update\n            </Button>\n          </Form>\n        )}\n      </FormContainer>\n    </>\n  )\n}\n\nexport default UserEditScreen\n ","/Users/wilson/Desktop/sprainers /frontend/src/screens/ProductEditScreen.jsx",["246"],[],"import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport FormContainer from \"../components/FrmContainer\";\nimport { listProductDetails, updateProduct } from \"../actions/productActions\";\nimport { PRODUCT_UPDATE_RESET } from \"../constants/productConstants\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nconst ProductEditScreen = ({ history }) => {\n  const { id } = useParams();\n  const productId = id;\n\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(0);\n  const [image, setImage] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [countInStock, setCountInStock] = useState(0);\n  const [description, setDescription] = useState(\"\");\n  const [uploading, setUploading] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const productDetails = useSelector((state) => state.productDetails);\n  const { loading, error, product } = productDetails;\n\n  const productUpdate = useSelector((state) => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate,\n  } = productUpdate;\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: PRODUCT_UPDATE_RESET });\n      navigate(\"/admin/productlist\");\n    } else {\n      if (!product || product._id !== productId) {\n        dispatch(listProductDetails(productId));\n      } else {\n        setName(product.name);\n        setPrice(product.price);\n        setImage(product.image);\n        setBrand(product.brand);\n        setCategory(product.category);\n        setCountInStock(product.countInStock);\n        setDescription(product.description);\n      }\n    }\n  }, [dispatch, history, productId, product, successUpdate]);\n\n  const uploadFileHandler = async (e) => {\n    const file = e.target.files[0];\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    setUploading(true);\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      };\n\n      const { data } = await axios.post(\"/api/upload\", formData, config);\n\n      setImage(data);\n      setUploading(false);\n    } catch (error) {\n      console.error(error);\n      setUploading(false);\n    }\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(\n      updateProduct({\n        _id: productId,\n        name,\n        price,\n        image,\n        brand,\n        category,\n        description,\n        countInStock,\n      })\n    );\n  };\n\n  return (\n    <>\n      <Link\n        to=\"/admin/productlist\"\n        className=\"btn btn-light my-3\"\n      >\n        Go Back\n      </Link>\n      <FormContainer>\n        <h1>Edit Product</h1>\n        {loadingUpdate && <Loader />}\n        {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n        {loading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant=\"danger\">{error}</Message>\n        ) : (\n          <Form onSubmit={submitHandler}>\n            <Form.Group controlId=\"name\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"name\"\n                placeholder=\"Enter name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"price\">\n              <Form.Label>Price</Form.Label>\n              <Form.Control\n                type=\"price\"\n                placeholder=\"Enter price\"\n                value={price}\n                onChange={(e) => setPrice(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"image\">\n              <Form.Label>Image</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter image url\"\n                value={image}\n                onChange={(e) => setImage(e.target.value)}\n              />\n              <Form.Label>Upload Image</Form.Label>\n              <Form.Control\n                type=\"file\"\n                id=\"image-file\"\n                onChange={(e) => uploadFileHandler(e)}\n              />\n              {uploading && <Loader />}\n            </Form.Group>\n\n            <Form.Group controlId=\"brand\">\n              <Form.Label>Brand</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter brand\"\n                value={brand}\n                onChange={(e) => setBrand(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"countInStock\">\n              <Form.Label>Count In Stock</Form.Label>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"Enter countInStock\"\n                value={countInStock}\n                onChange={(e) => setCountInStock(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"category\">\n              <Form.Label>Category</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter category\"\n                value={category}\n                onChange={(e) => setCategory(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"description\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Button\n              type=\"submit\"\n              variant=\"primary\"\n            >\n              Update\n            </Button>\n          </Form>\n        )}\n      </FormContainer>\n    </>\n  );\n};\n\nexport default ProductEditScreen;\n","/Users/wilson/Desktop/sprainers /frontend/src/screens/OrderListScreen.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/constants/userConstant.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/constants/orderConstant.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/constants/productConstants.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/constants/cartConstant.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/components/SearchBox.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/components/Message.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/components/FrmContainer.jsx",["247","248"],[],"import React, { Children } from 'react'\nimport { Container, Row } from 'react-bootstrap'\n\nconst FormContainer = ({ children }) => {\n  return (\n    <Container className=''>\n        <div className='row justify-content-md-center mx-auto'>\n            <div className='col col-md-6 col-sm-12'>\n                {children}\n            </div>\n        </div>\n    </Container>\n  )\n}\n\nexport default FormContainer","/Users/wilson/Desktop/sprainers /frontend/src/actions/userAction.js",["249","250"],[],"import axios from \"axios\";\nimport {\n  USER_DETAILS_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_RESET,\n  USER_LIST_FAIL,\n  USER_LIST_REQUEST,\n  USER_LIST_SUCCESS,\n  USER_LIST_RESET,\n  USER_LOGIN_FAIL,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGOUT,\n  USER_REGISTER_FAIL,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_UPDATE_PROFILE_FAIL,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_DELETE_SUCCESS,\n  USER_DELETE_FAIL,\n  USER_DELETE_REQUEST,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_REQUEST,\n  USER_UPDATE_FAIL,\n} from \"../constants/userConstant\";\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstant'\n\nconst backendUrl = process.env.REACT_APP_BACKEND_URL || \"\"\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    const { data } = await axios.post(\n      \"${backendUrl}/api/users/login\",\n      { email, password },\n      config\n    );\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem('userInfo')\n  localStorage.removeItem('cartItems')\n  localStorage.removeItem('shippingAddress')\n  localStorage.removeItem('paymentMethod')\n  dispatch({ type: USER_LOGOUT })\n  dispatch({ type: USER_DETAILS_RESET })\n  dispatch({ type: ORDER_LIST_MY_RESET })\n  dispatch({ type: USER_LIST_RESET })\n  document.location.href = '/login'\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    const { data } = await axios.post(\n      \"${backendUrl}/api/users\",\n      { name, email, password },\n      config\n    );\n\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data,\n    });\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// ... (other imports)\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`${backendUrl}/api/users/${id}`, config);\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.put(`${backendUrl}/api/users/profile`, user, config);\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`${backendUrl}/api/users`, config);\n\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: message,\n    });\n  }\n};\nexport const deleteUser = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    await axios.delete(`${backendUrl}/api/users/${id}`, config)\n\n    dispatch({ type: USER_DELETE_SUCCESS })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: message,\n    })\n  }\n} \nexport const updateUser = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST ,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.put(`${backendUrl}/api/users/${user._id}`, user, config)\n\n    dispatch({ type: USER_UPDATE_SUCCESS })\n\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\n\n    dispatch({ type: USER_DETAILS_RESET })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: message,\n    })\n  }\n}\n\n","/Users/wilson/Desktop/sprainers /frontend/src/actions/productActions.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/actions/cartAction.js",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/components/Rating.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/components/Loader.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/components/Product.jsx",["251"],[],"import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Rating from './Rating'\n\nconst Product = ({ product }) => {\n  return (\n    <>\n    <div className=\"card my-3 p-3\" style={{width: \"100%\"}}>\n        <Link to={`/product/${product._id}`}>\n            <img src={product.image} className=\"card-img-top\"/>\n        </Link>\n        <div className=\"card-body\">\n            <Link to={`/product/${product._id}`}  style={{textDecoration: 'none'}}>\n                <h6 className=\"card-title\"><strong>{product.name}</strong></h6>\n            </Link>\n            <div className=\"card-text\">\n                <Rating value={product.rating} text={`${product.numReviews} reviews`} />\n            </div>\n            <h3 className='card-text'>${product.price}</h3>\n        </div>\n    </div>\n    </>\n  )\n}\n\nexport default Product","/Users/wilson/Desktop/sprainers /frontend/src/components/CheckoutSteps.jsx",[],[],"/Users/wilson/Desktop/sprainers /frontend/src/actions/orderAction.js",[],[],{"ruleId":"252","severity":1,"message":"253","line":4,"column":10,"nodeType":"254","messageId":"255","endLine":4,"endColumn":15},{"ruleId":"256","severity":1,"message":"257","line":8,"column":32,"nodeType":"258","endLine":8,"endColumn":90},{"ruleId":"256","severity":1,"message":"257","line":9,"column":32,"nodeType":"258","endLine":9,"endColumn":90},{"ruleId":"256","severity":1,"message":"257","line":10,"column":32,"nodeType":"258","endLine":10,"endColumn":90},{"ruleId":"256","severity":1,"message":"257","line":11,"column":32,"nodeType":"258","endLine":11,"endColumn":90},{"ruleId":"256","severity":1,"message":"257","line":12,"column":32,"nodeType":"258","endLine":12,"endColumn":90},{"ruleId":"252","severity":1,"message":"259","line":9,"column":3,"nodeType":"254","messageId":"255","endLine":9,"endColumn":8},{"ruleId":"252","severity":1,"message":"260","line":13,"column":3,"nodeType":"254","messageId":"255","endLine":13,"endColumn":7},{"ruleId":"261","severity":1,"message":"262","line":25,"column":24,"nodeType":"263","messageId":"264","endLine":25,"endColumn":26},{"ruleId":"252","severity":1,"message":"265","line":26,"column":15,"nodeType":"254","messageId":"255","endLine":26,"endColumn":21},{"ruleId":"266","severity":1,"message":"267","line":56,"column":6,"nodeType":"268","endLine":56,"endColumn":42,"suggestions":"269"},{"ruleId":"252","severity":1,"message":"270","line":5,"column":8,"nodeType":"254","messageId":"255","endLine":5,"endColumn":14},{"ruleId":"252","severity":1,"message":"271","line":6,"column":8,"nodeType":"254","messageId":"255","endLine":6,"endColumn":14},{"ruleId":"252","severity":1,"message":"272","line":9,"column":10,"nodeType":"254","messageId":"255","endLine":9,"endColumn":19},{"ruleId":"252","severity":1,"message":"273","line":10,"column":8,"nodeType":"254","messageId":"255","endLine":10,"endColumn":19},{"ruleId":"252","severity":1,"message":"274","line":2,"column":10,"nodeType":"254","messageId":"255","endLine":2,"endColumn":14},{"ruleId":"252","severity":1,"message":"275","line":3,"column":10,"nodeType":"254","messageId":"255","endLine":3,"endColumn":15},{"ruleId":"252","severity":1,"message":"276","line":3,"column":31,"nodeType":"254","messageId":"255","endLine":3,"endColumn":34},{"ruleId":"252","severity":1,"message":"277","line":4,"column":10,"nodeType":"254","messageId":"255","endLine":4,"endColumn":23},{"ruleId":"252","severity":1,"message":"278","line":19,"column":9,"nodeType":"254","messageId":"255","endLine":19,"endColumn":21},{"ruleId":"266","severity":1,"message":"279","line":78,"column":12,"nodeType":"268","endLine":78,"endColumn":65,"suggestions":"280"},{"ruleId":"252","severity":1,"message":"281","line":1,"column":17,"nodeType":"254","messageId":"255","endLine":1,"endColumn":25},{"ruleId":"261","severity":1,"message":"262","line":10,"column":27,"nodeType":"263","messageId":"264","endLine":10,"endColumn":29},{"ruleId":"266","severity":1,"message":"282","line":43,"column":6,"nodeType":"268","endLine":43,"endColumn":25,"suggestions":"283","suppressions":"284"},{"ruleId":"252","severity":1,"message":"285","line":2,"column":23,"nodeType":"254","messageId":"255","endLine":2,"endColumn":32},{"ruleId":"252","severity":1,"message":"286","line":24,"column":37,"nodeType":"254","messageId":"255","endLine":24,"endColumn":41},{"ruleId":"252","severity":1,"message":"287","line":24,"column":43,"nodeType":"254","messageId":"255","endLine":24,"endColumn":48},{"ruleId":"252","severity":1,"message":"288","line":35,"column":14,"nodeType":"254","messageId":"255","endLine":35,"endColumn":27},{"ruleId":"252","severity":1,"message":"289","line":36,"column":12,"nodeType":"254","messageId":"255","endLine":36,"endColumn":23},{"ruleId":"266","severity":1,"message":"290","line":56,"column":6,"nodeType":"268","endLine":65,"endColumn":4,"suggestions":"291"},{"ruleId":"266","severity":1,"message":"292","line":44,"column":4,"nodeType":"268","endLine":44,"endColumn":51,"suggestions":"293"},{"ruleId":"266","severity":1,"message":"292","line":57,"column":6,"nodeType":"268","endLine":57,"endColumn":60,"suggestions":"294"},{"ruleId":"252","severity":1,"message":"295","line":1,"column":17,"nodeType":"254","messageId":"255","endLine":1,"endColumn":25},{"ruleId":"252","severity":1,"message":"276","line":2,"column":21,"nodeType":"254","messageId":"255","endLine":2,"endColumn":24},{"ruleId":"296","severity":1,"message":"297","line":43,"column":7,"nodeType":"298","messageId":"299","endLine":43,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":88,"column":7,"nodeType":"298","messageId":"299","endLine":88,"endColumn":32},{"ruleId":"300","severity":1,"message":"301","line":10,"column":13,"nodeType":"258","endLine":10,"endColumn":64},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Image' is defined but never used.","'Card' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'setQty' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'product._id'. Either include it or remove the dependency array.","ArrayExpression",["302"],"'Header' is defined but never used.","'Footer' is defined but never used.","'Container' is defined but never used.","'pexelsImage' is defined but never used.","'Link' is defined but never used.","'Table' is defined but never used.","'Row' is defined but never used.","'LinkContainer' is defined but never used.","'searchParams' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'navigate' and 'userInfo'. Either include them or remove the dependency array.",["303"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.",["304"],["305"],"'useParams' is defined but never used.","'page' is assigned a value but never used.","'pages' is assigned a value but never used.","'loadingCreate' is assigned a value but never used.","'errorCreate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["306"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["307"],["308"],"'Children' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"kind":"315","justification":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},"Update the dependencies array to be: [dispatch, id, product._id, successProductReview]",{"range":"323","text":"324"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, order, userInfo, navigate]",{"range":"325","text":"326"},"Update the dependencies array to be: [dispatch, navigate, order._id, success]",{"range":"327","text":"328"},"directive","","Update the dependencies array to be: [dispatch, history, navigate, successDelete, successCreate, createdProduct, userInfo]",{"range":"329","text":"330"},"Update the dependencies array to be: [dispatch, history, userId, user, successUpdate, navigate]",{"range":"331","text":"332"},"Update the dependencies array to be: [dispatch, history, productId, product, successUpdate, navigate]",{"range":"333","text":"334"},[1624,1660],"[dispatch, id, product._id, successProductReview]",[2498,2551],"[dispatch, orderId, successPay, successDeliver, order, userInfo, navigate]",[1395,1414],"[dispatch, navigate, order._id, success]",[1699,1839],"[dispatch, history, navigate, successDelete, successCreate, createdProduct, userInfo]",[1444,1491],"[dispatch, history, userId, user, successUpdate, navigate]",[1969,2023],"[dispatch, history, productId, product, successUpdate, navigate]"]